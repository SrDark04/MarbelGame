public class Cell {
    private String color;      // Color de la celda
    private boolean hole;      // Indica si tiene agujero
    private String marbel;     // Color de la canica (si hay)
    private int positionX;     // Posici√≥n X de la celda
    private int positionY;     // Posici√≥n Y de la celda

    private Rectangle background; 
    private Rectangle cell;       
    private Circle holeShape;
    private Circle marbleShape;

    // üîπ Constructor
    public Cell(String color, boolean hole) {
        this.color = color;
        this.hole = hole;
        this.marbel = null; // Por defecto, sin canica

        this.positionX = 0; 
        this.positionY = 0;

        // 1Ô∏è‚É£ Fondo
        background = new Rectangle();
        background.changeColor("black");
        background.changeSize(50, 50);
        background.setPosition(positionX, positionY);
        background.makeVisible();

        // 2Ô∏è‚É£ Celda
        cell = new Rectangle();
        cell.changeColor(color);
        cell.changeSize(40, 40);
        cell.setPosition(5, 5);
        cell.makeVisible();

        // 3Ô∏è‚É£ Agujero (si aplica)
        if (hole) {
            holeShape = new Circle();
            holeShape.changeColor("white");
            holeShape.changeSize(30);
            holeShape.setPosition(10, 10);
            holeShape.makeVisible();
        }
    }
    
    // üîπ Saber si la celda tiene un agujero
    public boolean hasHole() {
        return hole;
    }
    
    // üîπ Meter una canica (siempre entra)
    public void in(String marbel) {
        this.marbel = marbel;
    }
    
    // üîπ Obtener el color de la canica (si hay)
    public String getMarbleColor() {
        return this.marbel;
    }

    // üîπ Sacar la canica (solo si no hay agujero)
    public String out() {
        if (this.marbel != null) {
            if (!hole) { 
                String color = this.marbel;
                this.marbel = null;
                return color;
            } else {
                // Si hay agujero, la canica queda atrapada
                return "";
            }
        }
        return ""; // No hab√≠a canica
    }
    
    // üîπ Verificar si la celda est√° en estado correcto
    public boolean isOK() {
        if (!hole) {
            // ‚úÖ No hay agujero ‚Üí siempre correcto
            return true;
        }
    
        if (marbel == null) {
            // ‚úÖ Agujero vac√≠o ‚Üí correcto
            return true;
        }
    
        // ‚ö†Ô∏è Agujero ocupado ‚Üí verificamos color
        return marbel.equals(color);
    }
    
    // üîπ Verificar si la celda tiene una canica
    public boolean hasMarbel() {
        return marbel != null;
    }
    
    // üîπ Mover toda la celda en una direcci√≥n
    public void moveTo(String direction) {
        int step = 45; // tama√±o de la casilla en p√≠xeles
        int dx = 0;
        int dy = 0;
    
        switch (direction.toLowerCase()) {
            case "up":
                dy = -step;
                break;
            case "down":
                dy = step;
                break;
            case "left":
                dx = -step;
                break;
            case "right":
                dx = step;
                break;
            default:
                System.out.println("Direcci√≥n no v√°lida. Usa: up, down, left, right");
                return;
        }
    
        // üîπ Actualizar posiciones l√≥gicas
        positionX += dx;
        positionY += dy;
    
        // üîπ Mover representaciones gr√°ficas
        background.moveHorizontal(dx);
        background.moveVertical(dy);
    
        cell.moveHorizontal(dx);
        cell.moveVertical(dy);
    
        if (holeShape != null) {
            holeShape.moveHorizontal(dx);
            holeShape.moveVertical(dy);
        }
    
        if (marbleShape != null) {
            marbleShape.moveHorizontal(dx);
            marbleShape.moveVertical(dy);
        }
    }
    
    
        // üîπ Hacer visible toda la celda (incluyendo fondo, celda, agujero y canica si existe)
    public void makeVisible() {
        background.makeVisible();
        cell.makeVisible();
        
        if (holeShape != null) {
            holeShape.makeVisible();
        }
        
        if (marbleShape != null) {
            marbleShape.makeVisible();
        }
    }

    // üîπ Hacer invisible toda la celda
    public void makeInvisible() {
        background.makeInvisible();
        cell.makeInvisible();
        
        if (holeShape != null) {
            holeShape.makeInvisible();
        }
        
        if (marbleShape != null) {
            marbleShape.makeInvisible();
        }
    }

}
